<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="Member">
  
  	<select id="loginCheck" resultType = "String">
		select id from st.member where id=#{id} and password=#{password}
	</select>
  
  	<select id ="getMemInfo" resultType ="kh.gw.dto.MemberDTO">
		select m.id,m.password,m.name,to_char(m.birth,'YY. mm. dd') as birth_str,m.birth,m.gender,m.contact,m.address1,m.address2,m.zip_code,m.is_married,m.dept_code,m.position_code,to_char(m.reg_date,'YY. mm. dd') as reg_date_str,m.reg_date, m.access_level_code,m.break_total_count,m.break_use_count,m.retire_date, d.dept_name as dept_name, p.position_name as position_name from st.member m, st.position p, st.department d where (id=#{value}) and (m.dept_code like d.dept_code) and (m.position_code like p.position_code)
	</select>
	
	<select id="listMem" resultType = "kh.gw.dto.MemberDTO">
		select m.*,d.dept_name,d.dept_level,p.position_name from st.member m,st.department d, st.position p where (m.dept_code = d.dept_code) and (m.position_code = p.position_code) and (m.retire_date is null) order by 3
	</select>
	
	<select id="listDept" resultType = "kh.gw.dto.DepartmentDTO">
		select dept_code, dept_name, dept_dir_id, dept_level,nvl(dept_code_parent,-1) as dept_code_parent,dept_tree_code from st.department order by 2
	</select>
	
	<select id ="getMyInfo" resultType ="java.util.HashMap">
		select m.*, d.dept_name as dept_name, p.position_name as position_name from st.member m, st.position p, st.department d where (id=#{value}) and (m.dept_code like d.dept_code) and (m.position_code like p.position_code)
	</select>
	
	<insert id="insertMem">
		insert into st.member values(#{id},#{id},#{name},#{birth},#{gender},#{contact},#{address1},#{address2},#{zip_code},#{is_married},#{dept_code},#{position_code},#{reg_date},null,#{access_level_code},#{break_total_count},#{break_total_count})
	</insert>
	
	<update id="updateMemInfo">
		update st.member set name=#{name},gender=#{gender},contact=#{contact},address1=#{address1},address2=#{address2},zip_code=#{zip_code},is_married=#{is_married},dept_code=#{dept_code},position_code=#{position_code},break_use_count=#{break_use_count},retire_date=#{retire_date, jdbcType=DATE},access_level_code=#{access_level_code} where id= #{id}
	</update>
	
	<update id="updatePw">
		update st.member set password=#{newpw} where id=#{id}
	</update>
	<update id="updateBreakUseCount">
		update st.member set break_use_count=(break_use_count+#{break_use_count}) where id=#{id}
	</update>
	<select id="getMembersForAppWrite" resultType="java.util.HashMap">
		select id, name, dept_name, position_name, dept_tree_code, dept_code from st.member join st.department using (dept_code) join st.position using (position_code) where retire_date is null order by dept_tree_code
	</select>
	
	<update id="deleteMem">
		update st.member set retire_date = (SELECT CURRENT_DATE FROM DUAL) where id=#{value}
	</update>
  </mapper>